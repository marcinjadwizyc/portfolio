{"version":3,"sources":["components/Switch.module.scss","components/Nav.module.scss","components/Range.module.scss","components/Timer.module.scss","components/Btn.module.scss","context/AppContext.js","components/Btn.js","components/Timer.js","containers/TimerContainer.js","components/Range.js","components/Switch.js","containers/SettingsContainer.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppContext","React","createContext","isBellOn","changeBellStatus","appTime","changeAppTime","bellInterval","changeBellInterval","Btn","title","clickHandler","icon","className","styles","btn","onClick","defaultProps","Timer","time","minutes","Math","floor","seconds","slice","timer","TimerContainer","context","useContext","appTimeRef","useRef","Number","bellIntervalRef","isBellOnRef","timerInterval","bellSound","Audio","useState","isOn","changeStatus","changeTime","bellTime","changeBellTime","resetTimer","current","useEffect","setInterval","prevState","clearInterval","play","Range","name","label","max","value","changeHandler","range","htmlFor","id","input","type","min","step","onChange","event","target","Switch","classes","switch","push","switchChecked","join","tabIndex","switchBody","checked","SettingsContainer","Nav","activeSection","navItems","map","item","itemActive","key","innerText","nav","list","App","activeSectionMarkup","changeActiveSection","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07e96df7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"switch\":\"Switch_switch__1XP-P\",\"switchBody\":\"Switch_switchBody__oFSFD\",\"input\":\"Switch_input__35qxS\",\"switchChecked\":\"Switch_switchChecked__1ixfi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__21C2j\",\"list\":\"Nav_list__2ttjH\",\"item\":\"Nav_item__3muxB\",\"btn\":\"Nav_btn__qY0Q9\",\"itemActive\":\"Nav_itemActive__1rKk_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"range\":\"Range_range__2szG_\",\"label\":\"Range_label__2vWxP\",\"input\":\"Range_input__2aVjw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"timer\":\"Timer_timer__3PUgm\",\"time\":\"Timer_time__340dG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Btn_btn__29m9B\"};","import React from \"react\";\r\n\r\nconst AppContext = React.createContext({\r\n\tisBellOn: true,\r\n\tchangeBellStatus: () => {},\r\n\tappTime: 0,\r\n\tchangeAppTime: () => {},\r\n\tbellInterval: 0,\r\n\tchangeBellInterval: () => {}\r\n});\r\n\r\nexport default AppContext;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Btn.module.scss\";\r\n\r\nconst Btn = ({ title, clickHandler, icon }) => {\r\n\treturn (\r\n\t\t<button title={title} className={styles.btn} onClick={clickHandler}>\r\n\t\t\t{icon}\r\n\t\t</button>\r\n\t);\r\n};\r\n\r\nBtn.propTypes = {\r\n\ttitle: PropTypes.string,\r\n\tclickHandler: PropTypes.func.isRequired,\r\n\ticon: PropTypes.object.isRequired\r\n};\r\n\r\nBtn.defaultProps = {\r\n\ttitle: \"\"\r\n};\r\n\r\nexport default Btn;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Timer.module.scss\";\r\n\r\nconst Timer = ({ time }) => {\r\n\tconst minutes = Math.floor(time / 60);\r\n\tconst seconds = (\"0\" + time % 60).slice(-2);\r\n\r\n\treturn (\r\n\t\t<div className={styles.timer}>\r\n\t\t\t<span className={styles.time}>\r\n\t\t\t\t{minutes}:{seconds}\r\n\t\t\t</span>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nTimer.propTypes = {\r\n\ttime: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Timer;\r\n","import React, { useContext, useState, useEffect, useRef } from \"react\";\r\nimport { FaHistory, FaPlay, FaPause } from \"react-icons/fa\";\r\n\r\nimport AppContext from \"../context/AppContext\";\r\nimport Btn from \"../components/Btn\";\r\nimport Timer from \"../components/Timer\";\r\n\r\nconst TimerContainer = () => {\r\n\tconst context = useContext(AppContext);\r\n\r\n\tconst appTimeRef = useRef(Number(context.appTime));\r\n\tconst bellIntervalRef = useRef(Number(context.bellInterval));\r\n\tconst isBellOnRef = useRef(context.isBellOn);\r\n\r\n\tconst timerInterval = useRef();\r\n\tconst bellSound = useRef(new Audio(\"./bell.mp3\"));\r\n\r\n\tconst [ isOn, changeStatus ] = useState(false);\r\n\tconst [ time, changeTime ] = useState(context.appTime * 60);\r\n\tconst [ bellTime, changeBellTime ] = useState(context.bellInterval * 60);\r\n\r\n\tconst resetTimer = () => {\r\n\t\tchangeStatus(false);\r\n\t\tchangeTime(appTimeRef.current * 60);\r\n\t\tchangeBellTime(bellIntervalRef.current * 60);\r\n\t};\r\n\r\n\tconst initTimerInterval = () => {\r\n\t\treturn setInterval(() => {\r\n\t\t\tchangeTime((prevState) => prevState - 1);\r\n\t\t\tchangeBellTime((prevState) => prevState - 1);\r\n\t\t}, 1000);\r\n\t};\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tif (isOn) {\r\n\t\t\t\ttimerInterval.current = initTimerInterval();\r\n\t\t\t} else {\r\n\t\t\t\tclearInterval(timerInterval.current);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ isOn ]\r\n\t);\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tif (time === 0) {\r\n\t\t\t\tresetTimer();\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ time ]\r\n\t);\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tif (bellTime === 0) {\r\n\t\t\t\tchangeBellTime(bellIntervalRef.current * 60);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ bellTime ]\r\n\t);\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tif (time === 0) {\r\n\t\t\t\tbellSound.current.play();\r\n\t\t\t}\r\n\r\n\t\t\tif (bellTime === 0 && isBellOnRef.current) {\r\n\t\t\t\tbellSound.current.play();\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ time, bellTime ]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<section className=\"timer\">\r\n\t\t\t<Btn title=\"Reset\" clickHandler={resetTimer} icon={<FaHistory />} />\r\n\t\t\t<Timer time={time} />\r\n\t\t\t{isOn ? (\r\n\t\t\t\t<Btn title=\"Pause\" clickHandler={() => changeStatus(false)} icon={<FaPause />} />\r\n\t\t\t) : (\r\n\t\t\t\t<Btn title=\"Start\" clickHandler={() => changeStatus(true)} icon={<FaPlay />} />\r\n\t\t\t)}\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\nexport default TimerContainer;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Range.module.scss\";\r\n\r\nconst Range = ({ name, label, max, value, changeHandler }) => {\r\n\treturn (\r\n\t\t<div className={styles.range}>\r\n\t\t\t<label htmlFor={name} className={styles.label}>\r\n\t\t\t\t<span>{label}</span>\r\n\t\t\t\t<span>{`${value} ${value > 1 ? \"minutes\" : \"minute\"}`}</span>\r\n\t\t\t</label>\r\n\t\t\t<input\r\n\t\t\t\tid={name}\r\n\t\t\t\tclassName={`${styles.input} slider`}\r\n\t\t\t\ttype=\"range\"\r\n\t\t\t\tmin=\"1\"\r\n\t\t\t\tmax={max}\r\n\t\t\t\tstep=\"1\"\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tonChange={(event) => changeHandler(event.target.value)}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nRange.propTypes = {\r\n\tname: PropTypes.string.isRequired,\r\n\tlabel: PropTypes.string,\r\n\tmax: PropTypes.number,\r\n\tvalue: PropTypes.string.isRequired,\r\n\tchangeHandler: PropTypes.func.isRequired\r\n};\r\n\r\nRange.defaultProps = {\r\n\tlabel: \"\",\r\n\tmax: 60\r\n};\r\n\r\nexport default Range;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Switch.module.scss\";\r\n\r\nconst Switch = ({ name, label, value, changeHandler }) => {\r\n\tconst classes = [ `${styles.switch}` ];\r\n\r\n\tif (value) {\r\n\t\tclasses.push(`${styles.switchChecked}`);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={classes.join(\" \")}>\r\n\t\t\t<span className={styles.label}>{`${label} ${value ? \"On\" : \"Off\"}`}</span>\r\n\t\t\t<label tabIndex=\"0\" htmlFor={name} className={styles.switchBody} />\r\n\t\t\t<input\r\n\t\t\t\tid={name}\r\n\t\t\t\tclassName={styles.input}\r\n\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\tchecked={value}\r\n\t\t\t\tonChange={(event) => changeHandler(event.target.checked)}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nSwitch.propTypes = {\r\n\tname: PropTypes.string.isRequired,\r\n\tlabel: PropTypes.string,\r\n\tvalue: PropTypes.bool.isRequired,\r\n\tchangeHandler: PropTypes.func.isRequired\r\n};\r\n\r\nSwitch.defaultProps = {\r\n\tlabel: \"\"\r\n};\r\n\r\nexport default Switch;\r\n","import React, { useContext } from \"react\";\r\n\r\nimport AppContext from \"../context/AppContext\";\r\nimport Range from \"../components/Range\";\r\nimport Switch from \"../components/Switch\";\r\n\r\nconst SettingsContainer = () => {\r\n\tconst context = useContext(AppContext);\r\n\r\n\treturn (\r\n\t\t<section className=\"settings\">\r\n\t\t\t<Range\r\n\t\t\t\tname=\"appTime\"\r\n\t\t\t\tlabel=\"Meditation time:\"\r\n\t\t\t\tvalue={context.appTime}\r\n\t\t\t\tchangeHandler={context.changeAppTime}\r\n\t\t\t/>\r\n\t\t\t<Switch name=\"bellStatus\" label=\"Bell:\" value={context.isBellOn} changeHandler={context.changeBellStatus} />\r\n\t\t\t{context.isBellOn ? (\r\n\t\t\t\t<Range\r\n\t\t\t\t\tname=\"bellInterval\"\r\n\t\t\t\t\tlabel=\"Bell interval:\"\r\n\t\t\t\t\tmax={15}\r\n\t\t\t\t\tvalue={context.bellInterval}\r\n\t\t\t\t\tchangeHandler={context.changeBellInterval}\r\n\t\t\t\t/>\r\n\t\t\t) : null}\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\nexport default SettingsContainer;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Nav.module.scss\";\r\n\r\nconst Nav = ({ activeSection, clickHandler }) => {\r\n\tconst navItems = [ \"Settings\", \"Timer\" ].map((item) => {\r\n\t\tconst classes = [ `${styles.item}` ];\r\n\r\n\t\tif (item === activeSection) {\r\n\t\t\tclasses.push(`${styles.itemActive}`);\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<li key={item} className={classes.join(\" \")}>\r\n\t\t\t\t<button className={styles.btn} onClick={(event) => clickHandler(event.target.innerText)}>\r\n\t\t\t\t\t{item}\r\n\t\t\t\t</button>\r\n\t\t\t</li>\r\n\t\t);\r\n\t});\r\n\r\n\treturn (\r\n\t\t<nav className={styles.nav}>\r\n\t\t\t<ul className={styles.list}>{navItems}</ul>\r\n\t\t</nav>\r\n\t);\r\n};\r\n\r\nNav.propTypes = {\r\n\tactiveSection: PropTypes.string.isRequired,\r\n\tclickHandler: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Nav;\r\n","import React, { useState } from \"react\";\n\nimport AppContext from \"./context/AppContext\";\nimport TimerContainer from \"./containers/TimerContainer\";\nimport SettingsContainer from \"./containers/SettingsContainer\";\nimport Nav from \"./components/Nav\";\n\nfunction App() {\n\tconst [ activeSection, changeActiveSection ] = useState(\"Timer\");\n\tconst [ isBellOn, changeBellStatus ] = useState(true);\n\tconst [ appTime, changeAppTime ] = useState(\"15\");\n\tconst [ bellInterval, changeBellInterval ] = useState(\"1\");\n\n\tlet activeSectionMarkup;\n\n\tif (activeSection === \"Timer\") {\n\t\tactiveSectionMarkup = <TimerContainer />;\n\t} else {\n\t\tactiveSectionMarkup = <SettingsContainer />;\n\t}\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<AppContext.Provider\n\t\t\t\tvalue={{\n\t\t\t\t\tisBellOn: isBellOn,\n\t\t\t\t\tchangeBellStatus: changeBellStatus,\n\t\t\t\t\tappTime: appTime,\n\t\t\t\t\tchangeAppTime: changeAppTime,\n\t\t\t\t\tbellInterval: bellInterval,\n\t\t\t\t\tchangeBellInterval: changeBellInterval\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<main className=\"main\">{activeSectionMarkup}</main>\n\t\t\t</AppContext.Provider>\n\t\t\t<footer className=\"footer\">\n\t\t\t\t<Nav activeSection={activeSection} clickHandler={changeActiveSection} />\n\t\t\t</footer>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/global.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}