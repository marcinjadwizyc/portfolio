{"version":3,"sources":["Components/Background.js","Components/Btn.js","Components/TaskForm.js","Context/taskContext.js","Components/Task/TaskIcons.js","Components/Task/TaskInputs.js","Components/Task/Task.js","Components/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["Background","react_default","a","createElement","className","Btn","props","styles","join","onClick","click","children","TaskForm","onSubmit","addTask","type","placeholder","value","inputValue","onChange","changeInputValue","Components_Btn","clearTasks","taskContext","React","createContext","changeTaskStatus","updateTask","TaskIcons","context","useContext","TaskContext","title","event","priorityTitle","TaskInputs","data","description","Task","priority","push","open","inputs","Task_TaskInputs","id","Task_TaskIcons","TaskList","isDone","tasks","map","task","done","Components_Task_Task","key","App","state","isDoneListVisible","taskInputValue","lastID","tasksData","lsGetData","JSON","parse","localStorage","getItem","lsSetData","setItem","stringify","lsClearData","removeItem","changeInputValueHandler","newInput","target","_this","setState","clearTasksDataHandler","preventDefault","addTaskHandler","_this$state","newID","newTask","newTasks","concat","Object","toConsumableArray","alert","showDoneListHandler","presentStatus","getTaskHandler","taskID","Number","closest","getAttribute","taskArrayIndex","findIndex","newTasksData","markDoneTaskHandler","removeTaskHandler","splice","openTaskHandler","openValue","prioritiseTaskHandler","eventTask","prioritiesArr","filter","normalArr","changeTaskStatusHandler","action","updateTaskHandler","_this$getTaskHandler","lsData","this","doneList","Components_TaskList","Components_Background","Components_TaskForm","Context_taskContext","Provider","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15d0ec1d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Background = () => {\r\n\treturn <div className=\"background\" />;\r\n};\r\n\r\nexport default Background;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Btn = (props) => {\r\n\tconst styles = [ \"btn\", props.styles ].join(\" \");\r\n\r\n\treturn (\r\n\t\t<button className={styles} onClick={props.click}>\r\n\t\t\t{props.children}\r\n\t\t</button>\r\n\t);\r\n};\r\n\r\nBtn.propTypes = {\r\n\tclick: PropTypes.func.isRequired,\r\n\tstyles: PropTypes.string\r\n};\r\n\r\nexport default Btn;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Btn from \"./Btn\";\r\n\r\nconst TaskForm = (props) => {\r\n\treturn (\r\n\t\t<form className=\"taskForm\" onSubmit={props.addTask}>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tclassName=\"taskForm__input\"\r\n\t\t\t\tplaceholder=\"Add new task...\"\r\n\t\t\t\tvalue={props.inputValue}\r\n\t\t\t\tonChange={props.changeInputValue}\r\n\t\t\t/>\r\n\t\t\t<div className=\"taskForm__container-btn\">\r\n\t\t\t\t<Btn styles=\"btn--form\" click={props.addTask}>\r\n\t\t\t\t\tAdd task\r\n\t\t\t\t</Btn>\r\n\t\t\t\t<Btn styles=\"btn--form\" click={props.clearTasks}>\r\n\t\t\t\t\tClear tasks\r\n\t\t\t\t</Btn>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nTaskForm.propTypes = {\r\n\tinputValue: PropTypes.string.isRequired,\r\n\tchangeInputValue: PropTypes.func.isRequired,\r\n\taddTask: PropTypes.func.isRequired,\r\n\tclearTasks: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TaskForm;\r\n","import React from \"react\";\r\n\r\nconst taskContext = React.createContext({\r\n\tchangeTaskStatus: () => {},\r\n\tupdateTask: () => {}\r\n});\r\n\r\nexport default taskContext;\r\n","import React, { useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport TaskContext from \"../../Context/taskContext\";\r\n\r\nconst TaskIcons = (props) => {\r\n\tconst context = useContext(TaskContext);\r\n\r\n\treturn (\r\n\t\t<div className=\"task__icons\">\r\n\t\t\t<i\r\n\t\t\t\tclassName=\"task__icon fas fa-trash-alt\"\r\n\t\t\t\ttitle=\"Remove task\"\r\n\t\t\t\tonClick={(event) => context.changeTaskStatus(event, \"delete\")}\r\n\t\t\t/>\r\n\t\t\t<i\r\n\t\t\t\tclassName=\"task__icon fas fa-edit\"\r\n\t\t\t\ttitle=\"Edit task\"\r\n\t\t\t\tonClick={(event) => context.changeTaskStatus(event, \"open\")}\r\n\t\t\t/>\r\n\t\t\t<i\r\n\t\t\t\tclassName=\"task__icon fas fa-star\"\r\n\t\t\t\ttitle={props.priorityTitle}\r\n\t\t\t\tonClick={(event) => context.changeTaskStatus(event, \"priority\")}\r\n\t\t\t/>\r\n\t\t\t<i\r\n\t\t\t\tclassName=\"task__icon fas fa-check\"\r\n\t\t\t\ttitle=\"Mark task as done\"\r\n\t\t\t\tonClick={(event) => context.changeTaskStatus(event, \"done\")}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nTaskIcons.propTypes = {\r\n\tpriorityTitle: PropTypes.string\r\n};\r\n\r\nexport default TaskIcons;\r\n","import React, { useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport TaskContext from \"../../Context/taskContext\";\r\n\r\nconst TaskInputs = (props) => {\r\n\tconst context = useContext(TaskContext);\r\n\r\n\treturn (\r\n\t\t<div className=\"task__extention\">\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"task__title-input\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tvalue={props.data.title}\r\n\t\t\t\tonChange={(event) => context.updateTask(event, \"title\")}\r\n\t\t\t/>\r\n\t\t\t<textarea\r\n\t\t\t\tclassName=\"task__description-input\"\r\n\t\t\t\tplaceholder=\"Describe your task here...\"\r\n\t\t\t\tvalue={props.data.description}\r\n\t\t\t\tonChange={(event) => context.updateTask(event, \"description\")}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nTaskInputs.propTypes = {\r\n\tdata: PropTypes.object.isRequired\r\n};\r\n\r\nexport default TaskInputs;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport TaskIcons from \"./TaskIcons\";\r\nimport TaskInputs from \"./TaskInputs\";\r\n\r\nconst Task = (props) => {\r\n\tlet styles = [ \"task\" ];\r\n\tlet priorityTitle = \"Add priority\";\r\n\r\n\tif (props.data.priority) {\r\n\t\tstyles.push(\"task--priority\");\r\n\t\tpriorityTitle = \"Remove priority\";\r\n\t} else if (props.data.open) {\r\n\t\tstyles.push(\"task--open\");\r\n\t}\r\n\r\n\tconst inputs = props.data.open ? <TaskInputs data={props.data} /> : null;\r\n\r\n\treturn (\r\n\t\t<li className={styles.join(\" \")} id={props.data.id}>\r\n\t\t\t<div className=\"task__main\">\r\n\t\t\t\t{props.children}\r\n\t\t\t\t<TaskIcons priorityTitle={priorityTitle} />\r\n\t\t\t</div>\r\n\t\t\t{inputs}\r\n\t\t</li>\r\n\t);\r\n};\r\n\r\nTask.propTypes = {\r\n\tdata: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Task from \"./Task/Task\";\r\n\r\nconst TaskList = (props) => {\r\n\tlet styles = [ \"taskList\" ];\r\n\r\n\tif (props.isDone) {\r\n\t\tstyles.push(\"taskList--done\");\r\n\t}\r\n\r\n\tconst tasks = props.data.map((task) => {\r\n\t\tif (task.done === props.isDone) {\r\n\t\t\treturn (\r\n\t\t\t\t<Task data={task} key={task.id}>\r\n\t\t\t\t\t{task.title}\r\n\t\t\t\t</Task>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t});\r\n\r\n\treturn <ul className={styles.join(\" \")}>{tasks}</ul>;\r\n};\r\n\r\nTaskList.propTypes = {\r\n\tdata: PropTypes.array.isRequired,\r\n\tisDone: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default TaskList;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Background from \"./Components/Background\";\r\nimport TaskForm from \"./Components/TaskForm\";\r\nimport TaskList from \"./Components/TaskList\";\r\nimport Btn from \"./Components/Btn\";\r\n\r\nimport TaskContext from \"./Context/taskContext\";\r\n\r\nclass App extends Component {\r\n\tstate = {\r\n\t\tisDoneListVisible: false,\r\n\t\ttaskInputValue: \"\",\r\n\t\tlastID: 10000,\r\n\t\ttasksData: []\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tlet lsData = this.lsGetData();\r\n\r\n\t\tif (lsData.data !== null && lsData.lastID !== null) {\r\n\t\t\tlet { data, id } = lsData;\r\n\r\n\t\t\tdata.map((task) => {\r\n\t\t\t\ttask.open = false;\r\n\t\t\t});\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\ttasksData: data,\r\n\t\t\t\tlastID: id\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t// LocalStorage Functions\r\n\tlsGetData = () => {\r\n\t\treturn {\r\n\t\t\tdata: JSON.parse(localStorage.getItem(\"tasksData\")),\r\n\t\t\tid: JSON.parse(localStorage.getItem(\"lastID\"))\r\n\t\t};\r\n\t};\r\n\r\n\tlsSetData = (data, id) => {\r\n\t\tlocalStorage.setItem(\"tasksData\", JSON.stringify(data));\r\n\t\tlocalStorage.setItem(\"lastID\", JSON.stringify(id));\r\n\t};\r\n\r\n\tlsClearData = () => {\r\n\t\tlocalStorage.removeItem(\"tasksData\");\r\n\t\tlocalStorage.removeItem(\"lastID\");\r\n\t};\r\n\r\n\t// TaskForm Methods\r\n\tchangeInputValueHandler = (event) => {\r\n\t\tconst newInput = event.target.value;\r\n\r\n\t\tthis.setState({\r\n\t\t\ttaskInputValue: newInput\r\n\t\t});\r\n\t};\r\n\r\n\tclearTasksDataHandler = (event) => {\r\n\t\tevent.preventDefault();\r\n\r\n\t\tthis.lsClearData();\r\n\r\n\t\tthis.setState({\r\n\t\t\ttasksData: []\r\n\t\t});\r\n\t};\r\n\r\n\taddTaskHandler = (event) => {\r\n\t\tevent.preventDefault();\r\n\r\n\t\tconst { lastID, tasksData, taskInputValue } = this.state;\r\n\r\n\t\tconst newID = lastID + 1;\r\n\r\n\t\tif (taskInputValue !== \"\") {\r\n\t\t\tconst newTask = {\r\n\t\t\t\ttitle: taskInputValue,\r\n\t\t\t\tid: newID,\r\n\t\t\t\tdescription: \"\",\r\n\t\t\t\tpriority: false,\r\n\t\t\t\tdone: false,\r\n\t\t\t\topen: false\r\n\t\t\t};\r\n\r\n\t\t\tconst newTasks = [ ...tasksData, newTask ];\r\n\r\n\t\t\tthis.lsSetData(newTasks, newID);\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\ttasksData: newTasks,\r\n\t\t\t\tlastID: newID,\r\n\t\t\t\ttaskInputValue: \"\"\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\talert(\"Please add a task below...\");\r\n\t\t}\r\n\t};\r\n\r\n\t// Show Done List\r\n\tshowDoneListHandler = () => {\r\n\t\tconst presentStatus = this.state.isDoneListVisible;\r\n\r\n\t\tthis.setState({\r\n\t\t\tisDoneListVisible: !presentStatus\r\n\t\t});\r\n\t};\r\n\r\n\t// Change Task Status Methods\r\n\tgetTaskHandler = (event) => {\r\n\t\tconst taskID = Number(event.target.closest(\".task\").getAttribute(\"id\"));\r\n\r\n\t\tconst tasksData = [ ...this.state.tasksData ];\r\n\r\n\t\tconst taskArrayIndex = tasksData.findIndex((task) => {\r\n\t\t\treturn task.id === taskID;\r\n\t\t});\r\n\r\n\t\treturn {\r\n\t\t\tnewTasksData: tasksData,\r\n\t\t\ttaskArrayIndex: taskArrayIndex\r\n\t\t};\r\n\t};\r\n\r\n\tmarkDoneTaskHandler = (data) => {\r\n\t\tconst { newTasksData, taskArrayIndex } = data;\r\n\r\n\t\tnewTasksData[taskArrayIndex].done = true;\r\n\r\n\t\treturn newTasksData;\r\n\t};\r\n\r\n\tremoveTaskHandler = (data) => {\r\n\t\tconst { newTasksData, taskArrayIndex } = data;\r\n\r\n\t\tnewTasksData.splice(taskArrayIndex, 1);\r\n\r\n\t\treturn newTasksData;\r\n\t};\r\n\r\n\topenTaskHandler = (data) => {\r\n\t\tconst { newTasksData, taskArrayIndex } = data;\r\n\r\n\t\tconst openValue = newTasksData[taskArrayIndex].open;\r\n\r\n\t\tnewTasksData[taskArrayIndex].open = !openValue;\r\n\r\n\t\treturn newTasksData;\r\n\t};\r\n\r\n\tprioritiseTaskHandler = (data) => {\r\n\t\tlet { newTasksData, taskArrayIndex } = data;\r\n\r\n\t\tconst eventTask = newTasksData.splice(taskArrayIndex, 1)[0];\r\n\r\n\t\tnewTasksData = [ eventTask, ...newTasksData ];\r\n\r\n\t\tif (eventTask.priority) {\r\n\t\t\teventTask.priority = false;\r\n\r\n\t\t\tconst prioritiesArr = newTasksData.filter((task) => {\r\n\t\t\t\treturn task.priority === true;\r\n\t\t\t});\r\n\r\n\t\t\tconst normalArr = newTasksData.filter((task) => {\r\n\t\t\t\treturn task.priority === false;\r\n\t\t\t});\r\n\r\n\t\t\tnewTasksData = [ ...prioritiesArr, ...normalArr ];\r\n\t\t} else {\r\n\t\t\teventTask.priority = true;\r\n\t\t}\r\n\r\n\t\treturn newTasksData;\r\n\t};\r\n\r\n\tchangeTaskStatusHandler = (event, action) => {\r\n\t\tlet newTasksData;\r\n\r\n\t\tconst data = this.getTaskHandler(event);\r\n\r\n\t\tif (action === \"done\") {\r\n\t\t\tnewTasksData = this.markDoneTaskHandler(data);\r\n\t\t} else if (action === \"delete\") {\r\n\t\t\tnewTasksData = this.removeTaskHandler(data);\r\n\t\t} else if (action === \"open\") {\r\n\t\t\tnewTasksData = this.openTaskHandler(data);\r\n\t\t} else if (action === \"priority\") {\r\n\t\t\tnewTasksData = this.prioritiseTaskHandler(data);\r\n\t\t}\r\n\r\n\t\tthis.lsSetData(newTasksData, this.state.lastID);\r\n\r\n\t\tthis.setState({\r\n\t\t\ttasksData: newTasksData\r\n\t\t});\r\n\t};\r\n\r\n\t// Update Task Methods\r\n\tupdateTaskHandler = (event, action) => {\r\n\t\tlet { newTasksData, taskArrayIndex } = this.getTaskHandler(event);\r\n\r\n\t\tif (action === \"description\") {\r\n\t\t\tnewTasksData[taskArrayIndex].description = event.target.value;\r\n\t\t} else if (action === \"title\") {\r\n\t\t\tnewTasksData[taskArrayIndex].title = event.target.value;\r\n\t\t}\r\n\r\n\t\tthis.lsSetData(newTasksData, this.state.lastID);\r\n\r\n\t\tthis.setState({\r\n\t\t\ttasksData: newTasksData\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst doneList = this.state.isDoneListVisible ? <TaskList data={this.state.tasksData} isDone={true} /> : null;\r\n\r\n\t\treturn (\r\n\t\t\t<main className=\"app\">\r\n\t\t\t\t<Background />\r\n\t\t\t\t<TaskForm\r\n\t\t\t\t\tinputValue={this.state.taskInputValue}\r\n\t\t\t\t\tchangeInputValue={this.changeInputValueHandler}\r\n\t\t\t\t\tclearTasks={this.clearTasksDataHandler}\r\n\t\t\t\t\taddTask={this.addTaskHandler}\r\n\t\t\t\t/>\r\n\t\t\t\t<TaskContext.Provider\r\n\t\t\t\t\tvalue={{\r\n\t\t\t\t\t\tchangeTaskStatus: this.changeTaskStatusHandler,\r\n\t\t\t\t\t\tupdateTask: this.updateTaskHandler\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<TaskList data={this.state.tasksData} isDone={false} />\r\n\t\t\t\t\t<Btn styles=\"btn--done\" click={this.showDoneListHandler}>\r\n\t\t\t\t\t\tShow done tasks\r\n\t\t\t\t\t</Btn>\r\n\t\t\t\t\t{doneList}\r\n\t\t\t\t</TaskContext.Provider>\r\n\t\t\t</main>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}